#include <SDL3/SDL.h>
#include <SDL3_ttf/SDL_ttf.h>
#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <ctime>
#include <cstdlib>

using std::cin;
using std::cout;
using std::endl;
using std::vector;
using std::unordered_set;
using std::string;

struct temka { //наши темы
    std::string player, monster, wall, point, empty = "  ";
}

int WIDTH, HEIGHT; //ну тут понятно
int attempts = 0;
bool gameover;

struct Entity { //координаты какой то сущности
   int x, y;
}

Entity player;
std::vector<Entity> monsters



temka sea    = {"🐠", "🦈", "🪸", "⚪", "⭐"};   // Морская
temka forest = {"🐰", "🐺", "🌲", "🍄", "🥕"};   // Лесная
temka city   = {"🚗", "👮", "🚧", "🛞", "💎"};   // Городская
temka space  = {"🚀", "👾", "🌑", "✨", "🌟"};   // Космическая

std::vector<temka> thems = {sea, forest};
Theme now_t = sea;
std::vector<vector<string>> now;


std::unordered_map<string, vector<vector<vector<string>>>> LevelsByThems = {
    {"sea", {
        {{"🪸","🪸","🪸","🪸","🪸","🪸","🪸"},
         {"🪸","🐠","⚪","  ","🪸","⚪","🪸"},
         {"🪸","  ","🪸","  ","⚪","  ","🪸"},
         {"🪸","⚪","  ","🪸","  ","🦈","🪸"},
         {"🪸","⚪","  ","⚪","🪸","  ","🪸"},
         {"🪸","🦈","  ","  ","  ","⚪","🪸"},
         {"🪸","🪸","🪸","🪸","🪸","🪸","🪸"}}
    }},

    {"forest", {
        {{"🌲","🌲","🌲","🌲","🌲","🌲","🌲"},
         {"🌲","🐰","🍄","  ","🌲","🍄","🌲"},
         {"🌲","  ","🌲","  ","🍄","  ","🌲"},
         {"🌲","🍄","🌲","🍄","  ","🐺","🌲"},
         {"🌲","  ","🌲","  ","🌲","  ","🌲"},
         {"🌲","🍄","  ","🍄","  ","🍄","🌲"},
         {"🌲","🌲","🌲","🌲","🌲","🌲","🌲"}}
    }},

    {"city", {
        {{"🚧","🚧","🚧","🚧","🚧","🚧","🚧"},
         {"🚧","🚗","⚪","  ","🚧","⚪","🚧"},
         {"🚧","  ","🚧","  ","⚪","  ","🚧"},
         {"🚧","⚪","🚧","⚪","🚧","👮","🚧"},
         {"🚧","  ","  ","  ","⚪","  ","🚧"},
         {"🚧","⚪","  ","⚪","  ","⚪","🚧"},
         {"🚧","🚧","🚧","🚧","🚧","🚧","🚧"}}
    }},

    {"space", {
        {{"🌑","🌑","🌑","🌑","🌑","🌑","🌑"},
         {"🌑","🚀","✨","  ","🌑","✨","🌑"},
         {"🌑","  ","🌑","  ","✨","  ","🌑"},
         {"🌑","✨","🌑","✨","🌑","👾","🌑"},
         {"🌑","  ","  ","  ","✨","  ","🌑"},
         {"🌑","✨","  ","✨","  ","✨","🌑"},
         {"🌑","🌑","🌑","🌑","🌑","🌑","🌑"}}
    }}
};

temka now_temka = sea;


// тут настройка уровня будет размеры

// ваша часть герлз

//саш, проверь пж на что агрится ._.
void setupLevel(int levelNum, const string& themeName) {
    now = sort_theme[themeName][levelNum];
    HEIGHT = now.size();
    WIDTH = now[0].size();
    monsters.clear();
    for (int y = 0; y < HEIGHT; y++) {
        for (int x = 0; x < WIDTH; x++) {
            string &cell = now[y][x];
            if (cell == "🐠" || cell == "🐰" || cell == "🚗" || cell == "🚀") {
                player = {x, y};
                cell = now_t.player;
            } else if (cell == "🦈" || cell == "🐺" || cell == "👮" || cell == "👾") {
                monsters.push_back({x, y});
                cell = now_t.monster;
            } else if (cell == "🪸" || cell == "🌲" || cell == "🚧" || cell == "🌑") {
                cell = now_t.wall;
            } else if (cell == "⚪" || cell == "🍄" || cell == "🛞" || cell == "✨") {
                cell = now_t.point;
            } else if (cell == "⭐" || cell == "🥕" || cell == "💎" || cell == "🌟") {
                cell = now_t.BONUS;
            } else {
                cell = now_t.empty;
            }
        }
    }
}
bool checkWin() {
    for (auto &row : now)
        for (auto &cell : row)
            if (cell == now_t.point || cell == now_t.BONUS)
                return false;
    return true;
}
bool checkCollision(int x, int y) {
    return (now[y][x] == now_t.wall ||
            now[y][x] == now_t.monster);
}
void moveMonsters() {
    for (auto &m : monsters) {
        int nx = m.x, ny = m.y;
        int dir = rand() % 4;
        if (dir == 0) ny--;
        else if (dir == 1) ny++;
        else if (dir == 2) nx--;
        else if (dir == 3) nx++;
        if (nx >= 0 && ny >= 0 && nx < WIDTH && ny < HEIGHT && now[ny][nx] == now_t.empty) {
            now[m.y][m.x] = now_t.empty;
            m.x = nx; m.y = ny;
            now[m.y][m.x] = now_t.monster;
        }
    }
}
//а ничо тот факт что у нас дедлайн сегодня друзья, не игнорьте в телеге умоляю

void renderLevel(SDL_Renderer* renderer, TTF_Font* font) //окошко
{
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
    SDL_RenderClear(renderer);
    SDL_Color textColor = {255, 255, 255, 255};



//сетка 
for (int y = 0; y < HEIGHT; y++) {
        for (int x = 0; x < WIDTH; x++) {
            std::string cellText = now[y][x];

            SDL_Surface* surface = TTF_RenderText_Solid(font, cellText.c_str(), textColor);
            if (!surface) {
                std::cerr << "Ошибка TTF_RenderText_Solid: " << SDL_GetError() << std::endl;
                continue;
            }

            SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
            int texW = surface->w;
            int texH = surface->h;
            SDL_DestroySurface(surface);

            if (!texture) {
                std::cerr << "Ошибка SDL_CreateTextureFromSurface: " << SDL_GetError() << std::endl;
                continue;
            }

            SDL_FRect destRect = { static_cast<float>(x * CELL_SIZE), static_cast<float>(y * CELL_SIZE), static_cast<float>(CELL_SIZE), static_cast<float>(CELL_SIZE) };

            // Центрируем текст в ячейке
            int offsetX = (CELL_SIZE - texW) / 2;
            int offsetY = (CELL_SIZE - texH) / 2;
            destRect.x += offsetX;
            destRect.y += offsetY;

            SDL_RenderTexture(renderer, texture, NULL, &destRect);
            SDL_DestroyTexture(texture); 
        }
    }

//инфа об уровне
std::string attemptsText = "Попытка: " + std::to_string(attempts);
    SDL_Surface* surface = TTF_RenderText_Solid(font, attemptsText.c_str(), textColor);
    if (surface) {
        int textW = surface->w;
        int textH = surface->h;
        SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
        SDL_DestroySurface(surface);

        if (texture) {
            SDL_FRect destRect = { 10.0f, static_cast<float>(HEIGHT * CELL_SIZE + 10), static_cast<float>(textW), static_cast<float>(textH) };
            SDL_RenderTexture(renderer, texture, NULL, &destRect);
            SDL_DestroyTexture(texture);
        }
    }

    SDL_RenderPresent(renderer);
}
// тут ваш основной цикл
// маш пиши через using пж, так аккуратнее смотрится :)

